<!doctype html>
<html lang="fr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>HUSER6666666</title>
<style>
  /* ===== Reset & base ===== */
  * { box-sizing: border-box; }
  html,body { height:100%; margin:0; font-family: "Segoe UI", Roboto, system-ui, -apple-system, "Helvetica Neue", Arial; color:#f1e9d2; }
  a { color:inherit; }

  /* ===== Background: horreur Égypte antique (SVG + gradients) ===== */
  body {
    background-color:#080405;
    background-image:
      radial-gradient(ellipse at 10% 10%, rgba(255,230,200,0.03), transparent 12%),
      radial-gradient(ellipse at 90% 90%, rgba(255,200,160,0.02), transparent 10%),
      linear-gradient(180deg, rgba(10,6,4,0.6), rgba(0,0,0,0.8)),
      /* subtle papyrus texture made with repeating-radial gradients */
      repeating-linear-gradient(0deg, rgba(255,255,255,0.005) 0 1px, transparent 1px 12px);
    background-blend-mode:overlay,multiply,normal;
    min-height:100%;
    display:flex;
    align-items:center;
    justify-content:center;
    padding:32px;
    position:relative;
    overflow:hidden;
  }

  /* Decorative SVG "temple" at the back - slightly blurred */
  .bg-decoration {
    position:absolute;
    inset:0;
    z-index:0;
    opacity:0.12;
    filter: blur(1.2px) saturate(0.7);
    pointer-events:none;
  }

  /* ===== Card ===== */
  .game {
    z-index:2;
    width:100%;
    max-width:980px;
    background: linear-gradient(180deg, rgba(12,6,2,0.85), rgba(18,8,4,0.8));
    border: 1px solid rgba(255,230,170,0.06);
    box-shadow: 0 10px 40px rgba(0,0,0,0.7), 0 0 80px rgba(140,90,40,0.05) inset;
    border-radius:14px;
    padding:28px;
    display:flex;
    gap:20px;
    align-items:flex-start;
    color:#f7edd9;
    position:relative;
    overflow:visible;
  }

  /* Left column: title + scores */
  .left {
    width:320px;
    min-width:240px;
    display:flex;
    flex-direction:column;
    gap:12px;
    align-items:flex-start;
  }

  .title {
    font-size:20px;
    letter-spacing:1px;
    font-weight:700;
    display:flex;
    gap:12px;
    align-items:center;
  }
  .ankh {
    width:40px;height:40px; flex:0 0 40px;
    background: linear-gradient(180deg,#b68a33,#8a6220);
    display:grid; place-items:center;
    border-radius:8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.5);
  }
  .ankh svg { width:22px;height:22px; filter:drop-shadow(0 2px 4px rgba(0,0,0,0.6)); }

  .subtitle { font-size:13px; color:#e7d7b1; opacity:0.9; margin-top:2px; }

  .scoreboard {
    margin-top:12px;
    width:100%;
    display:flex;
    gap:8px;
    justify-content:space-between;
  }
  .score {
    background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(0,0,0,0.25));
    padding:12px;
    border-radius:10px;
    flex:1;
    text-align:center;
    box-shadow: 0 6px 18px rgba(0,0,0,0.5);
  }
  .score .label { font-size:12px; color:#d8c89f; opacity:0.9; }
  .score .value { font-size:28px; font-weight:700; margin-top:6px; color:#fff; letter-spacing:1px; }

  .history {
    margin-top:14px;
    width:100%;
    background: rgba(0,0,0,0.25);
    padding:10px;
    border-radius:8px;
    font-size:13px;
    min-height:80px;
    max-height:180px;
    overflow:auto;
    color:#f3e9d1;
  }

  /* Right column: gameplay area */
  .right {
    flex:1;
    display:flex;
    flex-direction:column;
    gap:12px;
    align-items:center;
  }

  .arena {
    width:100%;
    display:flex;
    gap:18px;
    align-items:center;
    justify-content:center;
    padding:18px;
    border-radius:12px;
    background: linear-gradient(180deg, rgba(0,0,0,0.15), rgba(0,0,0,0.28));
    border: 1px solid rgba(255,230,170,0.03);
  }

  .hand {
    width:150px;
    height:150px;
    border-radius:12px;
    background: linear-gradient(180deg, rgba(20,10,8,0.25), rgba(0,0,0,0.45));
    display:flex;
    align-items:center;
    justify-content:center;
    flex-direction:column;
    gap:8px;
    padding:8px;
    color:#f4e8c8;
    text-align:center;
  }

  .hand .who { font-size:12px; opacity:0.9; }
  .hand .choice {
    width:80px;height:80px;background:rgba(255,255,255,0.03);border-radius:10px;display:grid;place-items:center;font-size:18px;
    box-shadow: 0 4px 18px rgba(0,0,0,0.6);
  }

  .controls {
    margin-top:12px;
    display:flex;
    gap:12px;
    align-items:center;
    justify-content:center;
  }

  /* Buttons for choices */
  .btn {
    background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(0,0,0,0.25));
    border: 1px solid rgba(255,255,255,0.04);
    padding:12px 16px;
    border-radius:10px;
    cursor:pointer;
    min-width:120px;
    display:flex;
    gap:10px;
    align-items:center;
    justify-content:center;
    color:#fbf3da;
    font-weight:700;
    letter-spacing:0.6px;
    transition: transform .14s ease, box-shadow .14s ease;
    user-select:none;
  }
  .btn:hover { transform:translateY(-4px); box-shadow: 0 12px 30px rgba(0,0,0,0.5); }
  .btn:active { transform:translateY(-1px); }

  .btn svg { width:20px;height:20px; opacity:0.95; }

  .hint { font-size:12px; opacity:0.8; margin-top:8px; color:#e6d7a9; }

  /* ===== Modal styles ===== */
  .modal-backdrop {
    position:fixed;
    inset:0;
    background:rgba(2,1,0,0.72);
    display:none;
    z-index:20;
    align-items:center;
    justify-content:center;
    padding:20px;
  }
  .modal {
    width:100%;
    max-width:520px;
    background: linear-gradient(180deg, #1b0f06, #0e0705);
    border-radius:12px;
    padding:20px;
    border:1px solid rgba(255,220,140,0.06);
    box-shadow: 0 20px 60px rgba(0,0,0,0.75);
    color:#f7edd9;
    text-align:center;
  }
  .modal h2 { margin:6px 0 8px; font-size:20px; letter-spacing:0.6px; }
  .modal p { margin:10px 0 16px; color:#e9dcb6; }
  .modal .actions { display:flex; gap:10px; justify-content:center; margin-top:12px; }
  .modal input[type="password"], .modal input[type="text"] {
    padding:10px 12px; border-radius:8px; border:1px solid rgba(255,255,255,0.06); background:rgba(255,255,255,0.02);
    color:#fff; width:100%; max-width:320px; outline:none;
  }
  .primary {
    background: linear-gradient(180deg, #a77b2a, #7a4f18);
    border: none; color:#0c0402; padding:10px 14px; font-weight:800; border-radius:8px; cursor:pointer;
    box-shadow: 0 6px 18px rgba(122,70,28,0.24);
  }

  /* small screens */
  @media (max-width:820px) {
    .game { flex-direction:column; align-items:stretch; }
    .left { width:100%; order:2; }
    .right { order:1; }
    .arena { flex-direction:column; }
  }

  /* little flourishes */
  .scarab {
    position:absolute;
    right:18px;
    bottom:-30px;
    z-index:1;
    opacity:0.14;
    transform: rotate(5deg);
    pointer-events:none;
  }
</style>
</head>
<body>
  <!-- Decorative background SVG (temple + hieroglyphs feel) -->
  <svg class="bg-decoration" viewBox="0 0 1200 600" preserveAspectRatio="xMidYMid slice" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
    <defs>
      <linearGradient id="g1" x1="0" x2="0" y1="0" y2="1">
        <stop offset="0" stop-color="#a77b2a" stop-opacity="0.08"/>
        <stop offset="1" stop-color="#2b1808" stop-opacity="0.03"/>
      </linearGradient>
    </defs>
    <rect width="1200" height="600" fill="url(#g1)"/>
    <!-- silhouette columns -->
    <g fill="#000" opacity="0.6">
      <rect x="60" y="60" width="80" height="500" rx="8"/>
      <rect x="220" y="40" width="60" height="520" rx="6"/>
      <rect x="340" y="80" width="100" height="480" rx="10"/>
      <rect x="520" y="20" width="140" height="560" rx="12"/>
      <rect x="720" y="80" width="60" height="480" rx="6"/>
      <rect x="840" y="60" width="80" height="500" rx="8"/>
    </g>
    <!-- horizontal bands to mimic murals -->
    <g fill="#2b1909" opacity="0.14">
      <rect x="0" y="480" width="1200" height="60"/>
      <rect x="0" y="420" width="1200" height="20"/>
    </g>
    <!-- faint hieroglyph-like marks -->
    <g fill="#1b0e06" opacity="0.12">
      <circle cx="100" cy="140" r="8"/>
      <rect x="130" y="110" width="6" height="34" rx="3"/>
      <rect x="160" y="130" width="25" height="6" rx="3"/>
      <circle cx="980" cy="200" r="6"/>
      <rect x="920" y="230" width="6" height="34" rx="3"/>
      <rect x="900" y="210" width="25" height="6" rx="3"/>
    </g>
  </svg>

  <main class="game" role="main" aria-labelledby="title">
    <div class="left">
      <div class="title" id="title">
        <div class="ankh" aria-hidden="true">
          <svg viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg"><path fill="#fff" d="M32 4c-6.075 0-11 4.925-11 11 0 5.523 7 11 11 11s11-5.477 11-11c0-6.075-4.925-11-11-11zm1 30h-2v22h2zM22 36h20v6H22z"/></svg>
        </div>
        I know what you've done !
      </div>
      <div class="subtitle">Défie huser6666666. 3 victoires pour remporter (ou perdre) le secret.</div>

      <div class="scoreboard" role="region" aria-label="scores">
        <div class="score" id="playerScoreBox">
          <div class="label">Joueur</div>
          <div class="value" id="playerScore">0</div>
        </div>
        <div class="score" id="computerScoreBox">
          <div class="label">huser6666666</div>
          <div class="value" id="computerScore">0</div>
        </div>
      </div>

      <div class="history" id="history" aria-live="polite">
        <strong>Journal</strong>
        <div id="historyList" style="margin-top:8px;">Bienvenue, ô voyageur... choisis ton destin.</div>
      </div>
    </div>

    <div class="right">
      <div style="width:100%;display:flex;align-items:center;justify-content:space-between;gap:12px;">
        <div style="text-align:left">
          <div style="font-weight:700;font-size:13px;">Choisis ton geste petite merde !</div>
          <div style="font-size:12px;color:#dccf9f;opacity:0.9;margin-top:6px;">La table sacrée décidera de ton sort jeune zgeg.</div>
        </div>
        <div style="text-align:right">
          <div style="font-size:12px;color:#d9cfa2;opacity:0.9">Meilleur de 3 victoires</div>
        </div>
      </div>

      <div class="arena" role="region" aria-label="arena">
        <div class="hand" aria-hidden="true">
          <div class="who">Toi</div>
          <div class="choice" id="playerChoice">—</div>
        </div>

        <div style="width:1px;height:100px;background:linear-gradient(180deg, rgba(255,255,255,0.03), transparent);border-radius:2px;"></div>

        <div class="hand" aria-hidden="true">
          <div class="who">Oracle</div>
          <div class="choice" id="computerChoice">—</div>
        </div>
      </div>

      <div class="controls" role="toolbar" aria-label="choices">
        <button class="btn" data-move="rock" title="Pierre">
          <!-- fist icon -->
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 14c-1.1 0-2-.9-2-2V8c0-1.1.9-2 2-2h1v8H6zM18 14c1.1 0 2-.9 2-2v-2.5A2.5 2.5 0 0 0 17.5 7 2.5 2.5 0 0 0 15 9.5V14h3zM10 8h1v8h-1zM13 8h1v8h-1z" fill="#fff"/></svg>
          Pierre
        </button>

        <button class="btn" data-move="paper" title="Feuille">
          <!-- paper icon -->
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 2h8l4 4v12a2 2 0 0 1-2 2H6z" fill="#fff"/></svg>
          Feuille
        </button>

        <button class="btn" data-move="scissors" title="Ciseaux">
          <!-- scissors icon -->
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 11.5L20 6l-1.5-1.5L13 10l-5-5L6 6l5 5-5 5-1.5-1.5L9 13l5 5 1.5-1.5L11 13l3.5-1.5z" fill="#fff"/></svg>
          Ciseaux
        </button>
      </div>

      <div class="hint">Astuce : l'Oracle ne ment jamais complètement...</div>
    </div>

    <!-- scarab subtle image -->
    <svg class="scarab" viewBox="0 0 120 120" width="160" height="160" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
      <g transform="translate(10,10)" fill="#c49a47">
        <ellipse cx="50" cy="60" rx="40" ry="22" opacity="0.9"/>
        <rect x="20" y="18" width="60" height="14" rx="6" opacity="0.9"/>
        <circle cx="35" cy="44" r="6"/>
        <circle cx="65" cy="44" r="6"/>
      </g>
    </svg>
  </main>

  <!-- Modals -->
  <div class="modal-backdrop" id="modalBackdrop" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="modal" id="modal">
      <!-- content injected by JS -->
    </div>
  </div>

<script>
  // ===== Game logic =====
  const choices = ["rock","paper","scissors"];
  const playerScoreEl = document.getElementById('playerScore');
  const computerScoreEl = document.getElementById('computerScore');
  const playerChoiceEl = document.getElementById('playerChoice');
  const computerChoiceEl = document.getElementById('computerChoice');
  const historyList = document.getElementById('historyList');
  const modalBackdrop = document.getElementById('modalBackdrop');
  const modal = document.getElementById('modal');

  let playerScore = 0;
  let computerScore = 0;

  // helper: pretty name
  const names = { rock: "Pierre", paper: "Feuille", scissors: "Ciseaux" };

  function compRandomMove() {
    return choices[Math.floor(Math.random() * choices.length)];
  }

  function decideWinner(player, comp) {
    if (player === comp) return "tie";
    if (
      (player === "rock" && comp === "scissors") ||
      (player === "paper" && comp === "rock") ||
      (player === "scissors" && comp === "paper")
    ) return "player";
    return "computer";
  }

  function updateUI() {
    playerScoreEl.textContent = playerScore;
    computerScoreEl.textContent = computerScore;
  }

  function appendHistory(text) {
    const p = document.createElement('div');
    p.style.marginTop = "6px";
    p.textContent = text;
    historyList.prepend(p);
  }

  // show modal utility
  function showModal(contentHtml, focusSelector) {
    modal.innerHTML = contentHtml;
    modalBackdrop.style.display = "flex";
    modalBackdrop.setAttribute('aria-hidden','false');
    // focus if requested
    setTimeout(()=>{
      const el = focusSelector ? modal.querySelector(focusSelector) : modal.querySelector('button, input');
      if (el) el.focus();
    },120);
  }

  function closeModal() {
    modalBackdrop.style.display = "none";
    modalBackdrop.setAttribute('aria-hidden','true');
    modal.innerHTML = "";
    // reset game after closing modal
    resetGame();
  }

  function resetGame() {
    playerScore = 0; computerScore = 0;
    updateUI();
    playerChoiceEl.textContent = "—";
    computerChoiceEl.textContent = "—";
    appendHistory("Le plateau a été réinitialisé.");
  }

  // handle button clicks
  document.querySelectorAll('.btn').forEach(btn=>{
    btn.addEventListener('click', () => {
      const move = btn.getAttribute('data-move');
      playRound(move);
    });
  });

  function playRound(playerMove) {
    const computerMove = compRandomMove();

    playerChoiceEl.textContent = names[playerMove];
    computerChoiceEl.textContent = names[computerMove];

    const winner = decideWinner(playerMove, computerMove);

    if (winner === "tie") {
      appendHistory(`Égalité : ${names[playerMove]} vs ${names[computerMove]}.`);
    } else if (winner === "player") {
      playerScore++;
      appendHistory(`Tu gagnes : ${names[playerMove]} bat ${names[computerMove]}.`);
    } else {
      computerScore++;
      appendHistory(`L'Oracle gagne : ${names[computerMove]} bat ${names[playerMove]}.`);
    }

    updateUI();

    // check end conditions
    if (computerScore >= 3) {
      // show losing popup for player
      showModal(`
        <h2>La destinée est cruelle...</h2>
        <p>La prochaine fois je sors mon paff ce sera plus simple pour toi de le battre.</p>
        <div class="actions">
          <button class="primary" id="okLose">D'accord</button>
        </div>
      `, '#okLose');

      // attach close handler
      setTimeout(()=>{
        const btn = document.getElementById('okLose');
        if (btn) btn.addEventListener('click', () => closeModal());
      },50);

      return;
    }

    if (playerScore >= 3) {
      // show winning popup with password input
      showModal(`
        <h2>Tu as gagné... bravo pour cette fois</h2>
        <p>Écris le mot de passe pour révéler la suite.</p>
        <div style="display:flex;gap:8px;justify-content:center;flex-direction:column;align-items:center;">
          <input id="pw" type="password" placeholder="Mot de passe..." aria-label="Mot de passe">
          <div id="pwError" style="color:#ffb0a0;font-size:13px;min-height:18px;"></div>
          <div class="actions">
            <button class="primary" id="submitPw">Valider</button>
            <button id="cancelPw" class="btn">Annuler</button>
          </div>
        </div>
      `, '#pw');

      // attach handlers
      setTimeout(()=>{
        const submit = document.getElementById('submitPw');
        const cancel = document.getElementById('cancelPw');
        const pwInput = document.getElementById('pw');
        const pwError = document.getElementById('pwError');

        const correctPassword = "TEST"; // exact match

        if (submit) submit.addEventListener('click', () => {
          const val = pwInput.value || "ABDCE";
          if (val === correctPassword) {
            // Redirect to YouTube video (use the link you provided)
            const url = "https://www.youtube.com/shorts/zSEc5Zmpbbo";
            // Close modal then navigate
            modalBackdrop.style.display = "none";
            window.location.href = url;
          } else {
            pwError.textContent = "Mot de passe incorrect. Réessaie si bien sur t'es pas comme Noé à rien comprendre.";
            pwInput.focus();
            pwInput.select();
          }
        });

        if (cancel) cancel.addEventListener('click', () => closeModal());

        // also submit on Enter
        pwInput.addEventListener('keydown', (e)=>{
          if (e.key === 'Enter') submit.click();
        });

      },50);

      return;
    }
  }

  // close modal if clicking on backdrop outside modal
  modalBackdrop.addEventListener('click', (e)=>{
    if (e.target === modalBackdrop) {
      // allow closing by clicking outside (acts as cancel)
      closeModal();
    }
  });

  // keyboard escape closes it
  window.addEventListener('keydown', (e)=>{
    if (e.key === 'Escape' && modalBackdrop.style.display === 'flex') {
      closeModal();
    }
  });

  // initial message
  appendHistory("Que les anciens dieux te guident...");
</script>
</body>
</html>

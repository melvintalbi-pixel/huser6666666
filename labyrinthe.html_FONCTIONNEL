<!doctype html>
<html lang="fr">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Labyrinthe Hardcore — Trap Obligatoire</title>
<style>
:root{
  --bg:#050304;
  --wall:#0b0705;
  --floor:#2b2218;
  --player:#f6e6b2;
  --trap:#7b1420;
  --exit:#0b6b33;
  --text:#efe6c9;
  --accent:#b98a26;
}
body{margin:0;height:100vh;display:flex;align-items:center;justify-content:center;background:linear-gradient(180deg,#020202,var(--bg));font-family:Arial,sans-serif;color:var(--text);}
#grid{display:grid;grid-template-columns:repeat(25,24px);grid-template-rows:repeat(25,24px);gap:1px;}
.cell{width:24px;height:24px;box-sizing:border-box;}
.wall{background:var(--wall);}
.empty{background:var(--floor);}
.player{background:linear-gradient(180deg,var(--player),#d4af37);}
.trap{background:var(--trap);}
.exit{background:var(--exit);}
.modal-back{display:none;position:fixed;inset:0;background:rgba(0,0,0,0.85);justify-content:center;align-items:center;}
.modal{background:linear-gradient(180deg,#22160f,#0f0b08);padding:18px;border-radius:10px;border:2px solid rgba(185,138,38,0.18);width:360px;color:var(--text);text-align:center;}
.ctl{padding:8px 12px;margin-top:12px;border-radius:6px;background:#241b15;color:var(--text);cursor:pointer;}
</style>
</head>
<body>

<div id="grid"></div>

<div class="modal-back" id="modalBackdrop">
  <div class="modal" id="modal"></div>
</div>

<script>
(function(){
  const ROWS = 25, COLS = 25;
  const gridEl = document.getElementById('grid');
  const modalBackdrop = document.getElementById('modalBackdrop');
  const modal = document.getElementById('modal');

  let grid = [], player={r:1,c:1}, trapPassed=false;

  // init grid
  for(let r=0;r<ROWS;r++){
    grid[r]=[];
    for(let c=0;c<COLS;c++){
      grid[r][c]={type:'wall',el:null};
    }
  }

  // DFS maze generation (odd cells)
  function generateMaze(){
    const stack=[[1,1]];
    grid[1][1].type='empty';
    const dirs=[[0,2],[0,-2],[2,0],[-2,0]];
    while(stack.length){
      const [r,c] = stack[stack.length-1];
      let neighbors = [];
      for(const [dr,dc] of dirs){
        const nr=r+dr,nc=c+dc;
        if(nr>0 && nr<ROWS && nc>0 && nc<COLS && grid[nr][nc].type==='wall') neighbors.push([nr,nc,dr,dc]);
      }
      if(neighbors.length===0){ stack.pop(); continue; }
      const [nr,nc,dr,dc]=neighbors[Math.floor(Math.random()*neighbors.length)];
      grid[r+dr/2][c+dc/2].type='empty';
      grid[nr][nc].type='empty';
      stack.push([nr,nc]);
    }
  }

  generateMaze();

  // Place trap in a forced path
  const trapR= Math.floor(ROWS/2), trapC=Math.floor(COLS/2);
  grid[trapR][trapC].type='trap';

  // Place exit on far end
  let exitR=ROWS-2, exitC=COLS-2;
  while(grid[exitR][exitC].type!=='empty'){ exitR--; exitC--; }
  grid[exitR][exitC].type='exit';

  // Render
  function render(){
    gridEl.innerHTML='';
    for(let r=0;r<ROWS;r++){
      for(let c=0;c<COLS;c++){
        const div=document.createElement('div');
        const cell=grid[r][c];
        div.classList.add('cell');
        if(cell.type==='wall') div.classList.add('wall');
        else if(cell.type==='empty') div.classList.add('empty');
        else if(cell.type==='trap') div.classList.add('trap');
        else if(cell.type==='exit') div.classList.add('exit');
        if(r===player.r && c===player.c) div.classList.add('player');
        cell.el=div;
        gridEl.appendChild(div);
      }
    }
  }

  render();

  function showModal(html){ modal.innerHTML=html; modalBackdrop.style.display='flex'; }
  function hideModal(){ modalBackdrop.style.display='none'; }

  function resetPlayer(){ player={r:1,c:1}; trapPassed=false; render(); }

  function handleTrap(){
    showModal(`<h2>Piège obligatoire</h2><p>Résous ce calcul pour continuer :</p>
    <p style="font-weight:bold;font-size:16px;">Math.round(Math.sin(1.5707963267948966)*1e7 + Math.cos(0)*1e6 - 4333334)</p>
    <input id="ans" placeholder="Réponse" style="padding:6px;border-radius:4px;margin-top:6px;"><br>
    <button id="check" class="ctl">Valider</button>`);
    setTimeout(()=>{
      document.getElementById('check').addEventListener('click',()=>{
        const val=document.getElementById('ans').value;
        if(Number(val)===6666666){
          trapPassed=true;
          hideModal();
          render();
        } else { alert('Mauvaise réponse. Recommence !'); resetPlayer(); hideModal(); }
      });
    },50);
  }

  function handleExit(){
    if(!trapPassed){ alert('Tu dois passer par le piège avant de sortir !'); return; }
    showModal(`<h2>Bravo !</h2><p>Le mot de passe est : ENVOIE UN MESSAGE PRIVE A HUSER6666666 QUI CERTIFIE SUR L'HONNEUR QUE TU NE DONNERAS CETTE SOLUTION A PERSONNE ET IL TE DONNERA LE MOT DE PASSE</p>
    <button onclick="location.reload()" class="ctl">Recommencer</button>`);
  }

  // movement
  function canMove(r,c){ return r>=0 && r<ROWS && c>=0 && c<COLS && (grid[r][c].type==='empty' || grid[r][c].type==='trap' || grid[r][c].type==='exit'); }

  document.addEventListener('keydown',e=>{
    let nr=player.r,nc=player.c;
    if(e.key==='ArrowUp') nr--;
    else if(e.key==='ArrowDown') nr++;
    else if(e.key==='ArrowLeft') nc--;
    else if(e.key==='ArrowRight') nc++;
    else return;
    if(canMove(nr,nc)){
      player.r=nr; player.c=nc;
      const type=grid[nr][nc].type;
      if(type==='trap' && !trapPassed) handleTrap();
      else if(type==='exit') handleExit();
      render();
    }
  });
})();
</script>
</body>
</html>
